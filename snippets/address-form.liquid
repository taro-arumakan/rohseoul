{%- comment -%}
  ----------------------------------------------------------------------------------------------------------------------
  CUSTOMER ADDRESS
  ----------------------------------------------------------------------------------------------------------------------

  Generate the drawer and all the associated fields for a customer address. This handles both the new address and
  existing address.

  ********************************************
  Supported parameters
  ********************************************

  * address: the address to edit, or "customer.new_address" to create a new one (required)
{%- endcomment -%}

<x-modal id="customer-address-{{ address.id | default: 'new' }}" class="modal color-scheme color-scheme--dialog">
  {%- comment -%}Header part{%- endcomment -%}
  {%- if address.id != blank -%}
    <h2 class="h4" slot="header">{{ 'customer.addresses.edit_address' | t }}</h2>
  {%- else -%}
    <h2 class="h4" slot="header">{{ 'customer.addresses.add_address' | t }}</h2>
  {%- endif -%}

  {%- comment -%}Content part (default slot){%- endcomment -%}
  {%- form 'customer_address', address, class: 'form h-adr' -%}
    {%- assign first_name_label = 'customer.addresses.first_name' | t -%}
    {%- assign last_name_label = 'customer.addresses.last_name' | t -%}
    {%- assign company_label = 'customer.addresses.company' | t -%}
    {%- assign phone_label = 'customer.addresses.phone' | t -%}
    {%- assign address1_label = 'customer.addresses.address1' | t -%}
    {%- assign address2_label = 'customer.addresses.address2' | t -%}
    {%- assign city_label = 'customer.addresses.city' | t -%}
    {%- assign zip_label = 'customer.addresses.zip' | t -%}
    {%- assign country_label = 'customer.addresses.country' | t -%}
    {%- assign province_label = 'customer.addresses.province' | t -%}
    {%- assign set_default_label = 'customer.addresses.set_default' | t -%}

    <div class="fieldset">
      {%- if request.locale.iso_code == 'ja' -%}
        {%- render 'input',
          name: 'address[last_name]',
          label: last_name_label,
          value: form.last_name,
          autocomplete: 'family-name',
          id_prefix: address.id
        -%}
        {%- render 'input',
          name: 'address[first_name]',
          label: first_name_label,
          value: form.first_name,
          autocomplete: 'given-name',
          id_prefix: address.id
        -%}

        <country-selector
          class="contents"
          country="{{ form.country | escape }}"
          province="{{ form.province | escape }}"
        >
          {%- assign country_options = country_option_tags | replace: 'value="Japan"', 'value="Japan" selected' -%}
          {%- assign country_options = country_options
            | replace: '[&quot;Aichi&quot;,&quot;愛知県&quot;],[&quot;Akita&quot;,&quot;秋田県&quot;],[&quot;Aomori&quot;,&quot;青森県&quot;],[&quot;Chiba&quot;,&quot;千葉県&quot;],[&quot;Ehime&quot;,&quot;愛媛県&quot;],[&quot;Fukui&quot;,&quot;福井県&quot;],[&quot;Fukuoka&quot;,&quot;福岡県&quot;],[&quot;Fukushima&quot;,&quot;福島県&quot;],[&quot;Gifu&quot;,&quot;岐阜県&quot;],[&quot;Gunma&quot;,&quot;群馬県&quot;],[&quot;Hiroshima&quot;,&quot;広島県&quot;],[&quot;Hokkaidō&quot;,&quot;北海道&quot;],[&quot;Hyōgo&quot;,&quot;兵庫県&quot;],[&quot;Ibaraki&quot;,&quot;茨城県&quot;],[&quot;Ishikawa&quot;,&quot;石川県&quot;],[&quot;Iwate&quot;,&quot;岩手県&quot;],[&quot;Kagawa&quot;,&quot;香川県&quot;],[&quot;Kagoshima&quot;,&quot;鹿児島県&quot;],[&quot;Kanagawa&quot;,&quot;神奈川県&quot;],[&quot;Kumamoto&quot;,&quot;熊本県&quot;],[&quot;Kyōto&quot;,&quot;京都府&quot;],[&quot;Kōchi&quot;,&quot;高知県&quot;],[&quot;Mie&quot;,&quot;三重県&quot;],[&quot;Miyagi&quot;,&quot;宮城県&quot;],[&quot;Miyazaki&quot;,&quot;宮崎県&quot;],[&quot;Nagano&quot;,&quot;長野県&quot;],[&quot;Nagasaki&quot;,&quot;長崎県&quot;],[&quot;Nara&quot;,&quot;奈良県&quot;],[&quot;Niigata&quot;,&quot;新潟県&quot;],[&quot;Okayama&quot;,&quot;岡山県&quot;],[&quot;Okinawa&quot;,&quot;沖縄県&quot;],[&quot;Saga&quot;,&quot;佐賀県&quot;],[&quot;Saitama&quot;,&quot;埼玉県&quot;],[&quot;Shiga&quot;,&quot;滋賀県&quot;],[&quot;Shimane&quot;,&quot;島根県&quot;],[&quot;Shizuoka&quot;,&quot;静岡県&quot;],[&quot;Tochigi&quot;,&quot;栃木県&quot;],[&quot;Tokushima&quot;,&quot;徳島県&quot;],[&quot;Tottori&quot;,&quot;鳥取県&quot;],[&quot;Toyama&quot;,&quot;富山県&quot;],[&quot;Tōkyō&quot;,&quot;東京都&quot;],[&quot;Wakayama&quot;,&quot;和歌山県&quot;],[&quot;Yamagata&quot;,&quot;山形県&quot;],[&quot;Yamaguchi&quot;,&quot;山口県&quot;],[&quot;Yamanashi&quot;,&quot;山梨県&quot;],[&quot;Ōita&quot;,&quot;大分県&quot;],[&quot;Ōsaka&quot;,&quot;大阪府&quot;]',
              '[&quot;Hokkaidō&quot;,&quot;北海道&quot;],[&quot;Aomori&quot;,&quot;青森県&quot;],[&quot;Iwate&quot;,&quot;岩手県&quot;],[&quot;Miyagi&quot;,&quot;宮城県&quot;],[&quot;Akita&quot;,&quot;秋田県&quot;],[&quot;Yamagata&quot;,&quot;山形県&quot;],[&quot;Fukushima&quot;,&quot;福島県&quot;],[&quot;Ibaraki&quot;,&quot;茨城県&quot;],[&quot;Tochigi&quot;,&quot;栃木県&quot;],[&quot;Gunma&quot;,&quot;群馬県&quot;],[&quot;Saitama&quot;,&quot;埼玉県&quot;],[&quot;Chiba&quot;,&quot;千葉県&quot;],[&quot;Tōkyō&quot;,&quot;東京都&quot;],[&quot;Kanagawa&quot;,&quot;神奈川県&quot;],[&quot;Niigata&quot;,&quot;新潟県&quot;],[&quot;Toyama&quot;,&quot;富山県&quot;],[&quot;Ishikawa&quot;,&quot;石川県&quot;],[&quot;Fukui&quot;,&quot;福井県&quot;],[&quot;Yamanashi&quot;,&quot;山梨県&quot;],[&quot;Nagano&quot;,&quot;長野県&quot;],[&quot;Gifu&quot;,&quot;岐阜県&quot;],[&quot;Shizuoka&quot;,&quot;静岡県&quot;],[&quot;Aichi&quot;,&quot;愛知県&quot;],[&quot;Mie&quot;,&quot;三重県&quot;],[&quot;Shiga&quot;,&quot;滋賀県&quot;],[&quot;Kyōto&quot;,&quot;京都府&quot;],[&quot;Ōsaka&quot;,&quot;大阪府&quot;],[&quot;Hyōgo&quot;,&quot;兵庫県&quot;],[&quot;Nara&quot;,&quot;奈良県&quot;],[&quot;Wakayama&quot;,&quot;和歌山県&quot;],[&quot;Tottori&quot;,&quot;鳥取県&quot;],[&quot;Shimane&quot;,&quot;島根県&quot;],[&quot;Okayama&quot;,&quot;岡山県&quot;],[&quot;Hiroshima&quot;,&quot;広島県&quot;],[&quot;Yamaguchi&quot;,&quot;山口県&quot;],[&quot;Tokushima&quot;,&quot;徳島県&quot;],[&quot;Kagawa&quot;,&quot;香川県&quot;],[&quot;Ehime&quot;,&quot;愛媛県&quot;],[&quot;Kōchi&quot;,&quot;高知県&quot;],[&quot;Fukuoka&quot;,&quot;福岡県&quot;],[&quot;Saga&quot;,&quot;佐賀県&quot;],[&quot;Nagasaki&quot;,&quot;長崎県&quot;],[&quot;Kumamoto&quot;,&quot;熊本県&quot;],[&quot;Ōita&quot;,&quot;大分県&quot;],[&quot;Miyazaki&quot;,&quot;宮崎県&quot;],[&quot;Kagoshima&quot;,&quot;鹿児島県&quot;],[&quot;Okinawa&quot;,&quot;沖縄県&quot;]'
          -%}
          {%- render 'select',
            name: 'address[country]',
            label: country_label,
            options: country_options,
            autocomplete: 'country',
            id_prefix: address.id,
            additional_classes: 'p-country-name'
          -%}
          {%- render 'input',
            name: 'address[zip]',
            label: zip_label,
            value: form.zip,
            autocomplete: 'postal-code',
            autocapitalize: 'characters',
            id_prefix: address.id,
            additional_classes: 'p-postal-code'
          -%}
          {%- render 'select',
            name: 'address[province]',
            label: province_label,
            autocomplete: 'address-level1',
            id_prefix: address.id,
            additional_classes: 'p-region'
          -%}
        </country-selector>
        {%- render 'input',
          name: 'address[city]',
          label: city_label,
          value: form.city,
          autocomplete: 'address-level2',
          id_prefix: address.id,
          additional_classes: 'p-locality'
        -%}
        {%- render 'input',
          name: 'address[address1]',
          label: address1_label,
          value: form.address1,
          autocomplete: 'address-line1',
          id_prefix: address.id,
          additional_classes: 'p-street-address'
        -%}
        {%- render 'input',
          name: 'address[address2]',
          label: address2_label,
          value: form.address2,
          autocomplete: 'address-line2',
          id_prefix: address.id,
          additional_classes: 'p-extended-address'
        -%}
        {%- render 'input',
          name: 'address[company]',
          label: company_label,
          value: form.company,
          autocomplete: 'organization',
          id_prefix: address.id
        -%}
        {%- render 'input',
          type: 'tel',
          name: 'address[phone]',
          label: phone_label,
          value: form.phone,
          autocomplete: 'tel',
          id_prefix: address.id
        -%}
      {%- else -%}
        {%- render 'input',
          name: 'address[first_name]',
          label: first_name_label,
          value: form.first_name,
          autocomplete: 'given-name',
          id_prefix: address.id
        -%}
        {%- render 'input',
          name: 'address[last_name]',
          label: last_name_label,
          value: form.last_name,
          autocomplete: 'family-name',
          id_prefix: address.id
        -%}

        {%- render 'input',
          name: 'address[company]',
          label: company_label,
          value: form.company,
          autocomplete: 'organization',
          id_prefix: address.id
        -%}
        {%- render 'input',
          type: 'tel',
          name: 'address[phone]',
          label: phone_label,
          value: form.phone,
          autocomplete: 'tel',
          id_prefix: address.id
        -%}
        {%- render 'input',
          name: 'address[address1]',
          label: address1_label,
          value: form.address1,
          autocomplete: 'address-line1',
          id_prefix: address.id
        -%}
        {%- render 'input',
          name: 'address[address2]',
          label: address2_label,
          value: form.address2,
          autocomplete: 'address-line2',
          id_prefix: address.id
        -%}

        <div class="fieldset-row">
          {%- render 'input',
            name: 'address[city]',
            label: city_label,
            value: form.city,
            autocomplete: 'address-level2',
            id_prefix: address.id
          -%}
          {%- render 'input',
            name: 'address[zip]',
            label: zip_label,
            value: form.zip,
            autocomplete: 'postal-code',
            autocapitalize: 'characters',
            id_prefix: address.id
          -%}
        </div>

        <country-selector
          class="contents"
          country="{{ form.country | escape }}"
          province="{{ form.province | escape }}"
        >
          {%- render 'select',
            name: 'address[country]',
            label: country_label,
            options: all_country_option_tags,
            autocomplete: 'country',
            id_prefix: address.id
          -%}
          {%- render 'select',
            name: 'address[province]',
            label: province_label,
            autocomplete: 'address-level1',
            id_prefix: address.id
          -%}
        </country-selector>
      {%- endif -%}

      {%- if address.id == customer.default_address.id -%}
        {%- assign is_default_address = true -%}
      {%- else -%}
        {%- assign is_default_address = false -%}
      {%- endif -%}

      {%- render 'checkbox',
        name: 'address[default]',
        label: set_default_label,
        value: 1,
        checked: is_default_address,
        id_prefix: address.id
      -%}
    </div>

    {%- assign save_button = 'customer.addresses.save_address' | t -%}
    {%- render 'button', type: 'submit', content: save_button, size: 'xl' -%}
  {%- endform -%}
</x-modal>
